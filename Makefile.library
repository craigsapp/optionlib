##
## Programmer:    Craig Stuart Sapp <craig@ccrma.stanford.edu>
## Creation Date: Thu Feb  6 22:44:11 PST 2014
## Last Modified: Sun Mar  2 22:54:05 PST 2014
## Filename:      ...optionlib/Makefile.library
##
## Description:   This Makefile creates the option library lib/liboptionlib.a 
##
## To run this makefile, type (without quotes) "make -f Makefile.library",
## (or "gmake -f Makefile.library" on FreeBSD computers). Although it is 
## intended to be used the file "Makefile" which runs this makefile with 
## the command "make library".  After the library file is created, you 
## can compile specific programs with the Makefile.programs file.
##

#OSTYPE = LINUX
#OSTYPE = OSXPC
#OSTYPE = OSXOLD
ARCH =

# Set the environmental variable $MACOSX_DEPLOYMENT_TARGET to
# "10.4" in Apple OS X to compile for OS X 10.4 and later (for example,
# you can compile for OS X 10.4 computers even if you are using a 10.6
# computer).
ENV = 

# if OSTYPE is not defined, then this if statement will be run:
ifeq ($(origin OSTYPE), undefined)
   ifeq ($(shell uname),Darwin)
      OSTYPE = OSXPC
      ENV = MACOSX_DEPLOYMENT_TARGET=10.6
      # use the following to compile for 32-bit architecture on 64-bit comps:
      #ARCH = -m32 -arch i386
   else 
      OSTYPE = LINUX
      # use the following to compile for 32-bit architecture on 64-bit comps:
      # (you will need 32-bit libraries in order to do this)
      # ARCH = -m32 
   endif
endif
# Next if statement needed for some versions of make which already set OSTYPE:
ifeq ($(OSTYPE),linux)
   OSTYPE = LINUX
   # use the following to compile for 32-bit architecture on 64-bit comps:
   # (you will need 32-bit libraries in order to do this)
   # ARCH = -m32 
endif


###########################################################################
#                                                                         #
# Beginning of user-modifiable configuration variables                    #
#                                                                         #

OBJDIR    = obj
SRCDIR    = src
INCDIR    = include
LIBDIR    = lib
LIBFILE   = liboptionlib.a
COMPILER  = LANG=C $(ENV) g++ $(ARCH) 
AR        = ar
RANLIB    = ranlib

# DEFINES   = $(addprefix -D,$(OSTYPE))

PREFLAGS  = -c -g -Wall -O3 $(DEFINES) -I$(INCDIR)

# using C++ 2011 standard:
PREFLAGS += -std=c++11

# Add -static flag to compile without dynamics libraries for better portability:
POSTFLAGS = 
# POSTFLAGS += -static

#                                                                         #
# End of user-modifiable variables.                                       #
#                                                                         #
###########################################################################


# setting up the directory paths to search for dependency files
vpath %.h   $(INCDIR):$(SRCDIR)
vpath %.cpp $(SRCDIR):$(INCDIR)
vpath %.o   $(OBJDIR)

# generating a list of the object files
OBJS = $(notdir $(patsubst %.cpp,%.o,$(wildcard $(SRCDIR)/*.cpp)))

# targets which don't actually refer to files
.PHONY : all clean makedirs external


###########################################################################
#                                                                         #
# Hardware Configurations:                                                #
#                                                                         #

all: makedirs external library

library: $(OBJS)

   ifeq ($(OSTYPE),LINUX)
	@echo "Creating. option library. file. for. linux ...".
	-rm -f $(LIBDIR)/$(LIBFILE)
	$(AR) r $(LIBDIR)/$(LIBFILE) $(OBJDIR)/*.o 
	$(RANLIB) $(LIBDIR)/$(LIBFILE)
   endif

   ifeq ($(OSTYPE),OSXOLD)
	@echo "Creating option library file for OSX (PowerPC)..."
	-rm -f $(LIBDIR)/$(LIBFILE)
	$(AR) r $(LIBDIR)/$(LIBFILE) $(OBJDIR)/*.o 
	$(RANLIB) $(LIBDIR)/$(LIBFILE)
   endif

   ifeq ($(OSTYPE),OSXPC)
	@echo "Creating option library file for OSX (Intel)..."
	-rm -f $(LIBDIR)/$(LIBFILE)
	$(AR) r $(LIBDIR)/$(LIBFILE) $(OBJDIR)/*.o 
	$(RANLIB) $(LIBDIR)/$(LIBFILE)
   endif

   ifeq ($(OSTYPE),VISUAL)
	echo "This makefile doesn\'t work with Visual C++."
   endif

clean:
	@echo Erasing object files:
	-rm -f $(OBJDIR)/*.o
	@echo Erasing obj directory:
	-rmdir $(OBJDIR)

makedirs: 
	-mkdir $(OBJDIR)
	-mkdir $(LIBDIR)


###########################################################################
#                                                                         #
# defining an explicit rule for object file dependencies                  #
#                                                                         #


%.o : %.cpp
	$(COMPILER) $(PREFLAGS) -o $(OBJDIR)/$(notdir $@) $(POSTFLAGS) $<

#                                                                         #
###########################################################################



###########################################################################
#                                                                         #
# Dependencies -- generated with the following command in                 #
#      the src directory (in bash shell):                                 #
#                                                                         #
#   for i in *.cpp                                                        #
#   do                                                                    #
#      cc -I../include -MM $i | sed 's/\.\.\/include\///g'                #
#      echo ""                                                            #
#   done                                                                  #
#                                                                         #
# Or in a csh-type shell (such as tcsh):                                  #
#                                                                         #
#   foreach i (*.cpp)                                                     #
#      cc -I../include -MM $i | sed 's/\.\.\/include\///g'                #
#      echo ""                                                            #
#   end                                                                   #

ScoreItem.o: ScoreItem.cpp ScoreItem.h ScoreItemBase.h

ScoreItemBase.o: ScoreItemBase.cpp ScorePageBase.h \
 ScoreItem.h ScoreItemBase.h ScorePageBase_AnalysisInfo.h \
 ScorePageBase_PrintInfo.h ScorePageBase_StaffInfo.h

ScoreItemEdit.o: ScoreItemEdit.cpp ScoreItemEdit.h  ScoreItemBase.h

ScoreItem_notes.o: ScoreItem_notes.cpp ScoreItem.h ScoreItemBase.h

ScoreItem_print.o: ScoreItem_print.cpp ScoreItem.h ScoreItemBase.h

ScoreItem_sort.o: ScoreItem_sort.cpp ScoreItem.h ScoreItemBase.h

ScorePage.o: ScorePage.cpp ScorePage.h ScorePageBase.h ScoreItem.h \
 ScoreItemBase.h ScorePageBase_AnalysisInfo.h ScorePageBase_PrintInfo.h \
 ScorePageBase_StaffInfo.h

ScorePageBase.o: ScorePageBase.cpp ScorePageBase.h ScoreItem.h \
 ScoreItemBase.h ScorePageBase_AnalysisInfo.h ScorePageBase_PrintInfo.h \
 ScorePageBase_StaffInfo.h

ScorePageBase_StaffInfo.o: ScorePageBase_StaffInfo.cpp \
 ScorePageBase_StaffInfo.h ScoreItem.h ScoreItemBase.h

ScorePage_data.o: ScorePage_data.cpp ScorePage.h ScorePageBase.h \
 ScoreItem.h ScoreItemBase.h ScorePageBase_AnalysisInfo.h \
 ScorePageBase_PrintInfo.h ScorePageBase_StaffInfo.h

ScorePage_duration.o: ScorePage_duration.cpp ScorePage.h ScorePageBase.h \
 ScoreItem.h ScoreItemBase.h ScorePageBase_AnalysisInfo.h \
 ScorePageBase_PrintInfo.h ScorePageBase_StaffInfo.h

ScorePage_staff.o: ScorePage_staff.cpp ScorePage.h ScorePageBase.h \
 ScoreItem.h ScoreItemBase.h ScorePageBase_AnalysisInfo.h \
 ScorePageBase_PrintInfo.h ScorePageBase_StaffInfo.h

